SELECT USER
FROM DUAL;
--==>> SCOTT


--※ BETWEEN ⓐ AND ⓑ 는 날짜형, 숫자형, 문자형 데이터 모두에 적용된다.
--   단, 문자형일 경우 아스키코드 순서를 따르기 때문에 (사전식 배열)
--   대문자가 앞쪽에 위치하고 소문자가 뒤쪽에 위치한다.
--   또한, BETWEEN ⓐ AND ⓑ 는 해당 구문이 수행되는 시점에서
--   오라클 내부적으로는 부등호 연산자의 형태로 바뀌어 연산 처리된다.


--○ ORACLE에서 내가 원하는 문자의 ASCII 코드 확인방법
SELECT ASCII('A') "COL1", ASCII('B') "COL2", 
    ASCII('a') "COL3", ASCII('b') "COL4"
FROM DUAL;
--==>> 65	66	97	98


SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB = 'SALESMAN' 
   OR JOB = 'CLERK';
--==>>
/*
SMITH	CLERK	    800
ALLEN	SALESMAN	1600
WARD	SALESMAN	1250
MARTIN	SALESMAN	1250
TURNER	SALESMAN	1500
ADAMS	CLERK	    1100
JAMES	CLERK	    950
MILLER	CLERK	    1300
호석이	SALESMAN	
문정이	SALESMAN	
*/

SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB IN ('SALESMAN', 'CLERK');
--==>>
/*
SMITH	CLERK	    800
ALLEN	SALESMAN	1600
WARD	SALESMAN	1250
MARTIN	SALESMAN	1250
TURNER	SALESMAN	1500
ADAMS	CLERK	    1100
JAMES	CLERK	    950
MILLER	CLERK	    1300
호석이	SALESMAN	
문정이	SALESMAN	
*/

SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB = ANY ('SALESMAN', 'CLERK');
-- JOB이 SALESMAN 이나 CLERK 에 일치하면 아무거나
--==>>
/*
SMITH	CLERK	    800
ALLEN	SALESMAN	1600
WARD	SALESMAN	1250
MARTIN	SALESMAN	1250
TURNER	SALESMAN	1500
ADAMS	CLERK	    1100
JAMES	CLERK	    950
MILLER	CLERK	    1300
호석이	SALESMAN	
문정이	SALESMAN	
*/

-- IN을 쓰던지, ANY를 쓰던지 → 다 OR 연산자로 바뀌어서 처리됨
-- BETWEEN A AND B 를 써도   → 다 부등호연산자로 바뀌어서 처리됨

--※ 위의 3가지 유형의 쿼리문은 모두 같은 결과를 반환한다.
--   하지만, 맨 위의 쿼리문(OR)이 가장 빠르게 처리된다.
--   물론 메모리에 대한 내용이 아니라 CPU 처리에 대한 내용이므로
--   이 부분까지 감안하여 쿼리문을 구성하게 되는 경우는 많지 않다.
--   → 『IN』과 『= ANY』 는 같은 연산자 효과를 가진다.
--      이들 모두는 내부적으로 『OR』구조로 변경되어 연산 처리된다.


--------------------------------------------------------------------------------

--○ 추가 실습 테이블 구성(TBL_SAWON)
CREATE TABLE TBL_SAWON
( SANO      NUMBER(4)               -- 사원번호
, SANAME    VARCHAR2(30)            -- 사원이름
, JUBUN     CHAR(13)                -- 주민번호
, HIREDATE  DATE    DEFAULT SYSDATE -- 입사일(비어있다면 DEFAULT로 SYSDATE)
, SAL       NUMBER(10)              -- 급여
);
--==>> Table TBL_SAWON이(가) 생성되었습니다.

SELECT *
FROM TBL_SAWON;
--==>> 조회 결과 없음 (테이블만 만들어놓은 상태이기 때문에)

DESC TBL_SAWON;
--==>>
/*
이름     널? 유형           
-------- -- ------------ 
SANO        NUMBER(4)    
SANAME      VARCHAR2(30) 
JUBUN       CHAR(13)     
HIREDATE    DATE         
SAL         NUMBER(10)
*/


--○ 생성된 테이블에 데이터 입력(TBL_SAWON)
INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1001, '김민성', '9707251234567', TO_DATE('2005-01-03', 'YYYY-MM-DD'), 3000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1002, '서민지', '9505152234567', TO_DATE('1999-11-23', 'YYYY-MM-DD'), 4000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1003, '이지연', '9905192234567', TO_DATE('2006-08-10', 'YYYY-MM-DD'), 3000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1004, '이연주', '9508162234567', TO_DATE('2007-10-10', 'YYYY-MM-DD'), 4000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1005, '오이삭', '9805161234567', TO_DATE('2007-10-10', 'YYYY-MM-DD'), 4000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1006, '이현이', '8005132234567', TO_DATE('1999-10-10', 'YYYY-MM-DD'), 1000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1007, '박한이', '0204053234567', TO_DATE('2010-10-10', 'YYYY-MM-DD'), 1000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1008, '선동렬', '6803171234567', TO_DATE('1998-10-10', 'YYYY-MM-DD'), 1500);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1009, '선우용녀', '6912232234567', TO_DATE('1998-10-10', 'YYYY-MM-DD'), 1300);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1010, '선우선', '0303044234567', TO_DATE('2010-10-10', 'YYYY-MM-DD'), 1600);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1011, '남주혁', '0506073234567', TO_DATE('2012-10-10', 'YYYY-MM-DD'), 2600);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1012, '남궁민', '0208073234567', TO_DATE('2012-10-10', 'YYYY-MM-DD'), 2600);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1013, '남진', '6712121234567', TO_DATE('1998-10-10', 'YYYY-MM-DD'), 2200);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1014, '홍수민', '0005044234567', TO_DATE('2015-10-10', 'YYYY-MM-DD'), 5200);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1015, '임소민', '9711232234567', TO_DATE('2007-10-10', 'YYYY-MM-DD'), 5500);

--==>> 1 행 이(가) 삽입되었습니다. * 15


--○ 확인
SELECT *
FROM TBL_SAWON;
--==>>
/*
1001	김민성	    9707251234567	2005-01-03	3000
1002	서민지	    9505152234567	1999-11-23	4000
1003	이지연	    9905192234567	2006-08-10	3000
1004	이연주	    9508162234567	2007-10-10	4000
1005	오이삭	    9805161234567	2007-10-10	4000
1006	이현이	    8005132234567	1999-10-10	1000
1007	박한이	    0204053234567	2010-10-10	1000
1008	선동렬	    6803171234567	1998-10-10	1500
1009	선우용녀    6912232234567	1998-10-10	1300
1010	선우선	    0303044234567	2010-10-10	1600
1011	남주혁	    0506073234567	2012-10-10	2600
1012	남궁민	    0208073234567	2012-10-10	2600
1013	남진      	6712121234567	1998-10-10	2200
1014	홍수민	    0005044234567	2015-10-10	5200
1015	임소민	    9711232234567	2007-10-10	5500
*/

-- 데이터 잘못입력했으면 『ROLLBACK;』 실행


--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ TBL_SAWON 테이블에서 '이지연' 사원의 데이터를 조회한다.
SELECT *
FROM TBL_SAWON
WHERE SANAME = '이지연';
--==>> 1003	이지연	9905192234567	2006-08-10	3000

-- LIKE : ~처럼, ~같이
SELECT *
FROM TBL_SAWON
WHERE SANAME LIKE '이지연';
--==>> 1003	이지연	9905192234567	2006-08-10	3000

--※ LIKE : 동사 → 좋아하다
--          부사 → ~와 같이, ~처럼     CHECK~!!!

--※ WHILD CARD(CHARACTER) 와일드카드 → 『%』
--   『LIKE』와 함께 사용되는 『%』는 모든 글자를 의미하고 (아무것도 없어도 인정)
--   『LIKE』와 함께 사용되는 『_』는 아무 글자 한 개를 의미한다.


--○ TBL_SAWON 테이블에서 성씨가 『김』씨인 사원의
--   사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME = '김';
--==>> 조회 결과 없음
-- 이건 사원명이 '김'인 사람을 찾는거임..

SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '김__';
--==>> 김민성	9707251234567	3000

SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '김%';
--==>> 김민성	9707251234567	3000


--○ TBL_SAWON 테이블에서 성씨가 『이』씨인 사원의
--   사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '이%';
--==>>
/*
이지연	9905192234567	3000
이연주	9508162234567	4000
이현이	8005132234567	1000
*/


--○ TBL_SAWON 테이블에서 이름의 마지막 글자가 『민』인 사원의
--   사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%민';
--==>>
/*
남궁민	0208073234567	2600
홍수민	0005044234567	5200
임소민	9711232234567	5500
*/


--○ 추가 데이터 입력(TBL_SAWON)
INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1016, '이이경', '0603194234567', TO_DATE('2015-01-20', 'YYYY-MM-DD'), 1500);
--==>> 1 행 이(가) 삽입되었습니다.

--○ 확인
SELECT *
FROM TBL_SAWON;
--==>>
/*
1001	김민성	9707251234567	2005-01-03	3000
1002	서민지	9505152234567	1999-11-23	4000
1003	이지연	9905192234567	2006-08-10	3000
1004	이연주	9508162234567	2007-10-10	4000
1005	오이삭	9805161234567	2007-10-10	4000
1006	이현이	8005132234567	1999-10-10	1000
1007	박한이	0204053234567	2010-10-10	1000
1008	선동렬	6803171234567	1998-10-10	1500
1009	선우용녀	6912232234567	1998-10-10	1300
1010	선우선	0303044234567	2010-10-10	1600
1011	남주혁	0506073234567	2012-10-10	2600
1012	남궁민	0208073234567	2012-10-10	2600
1013	남진	    6712121234567	1998-10-10	2200
1014	홍수민	0005044234567	2015-10-10	5200
1015	임소민	9711232234567	2007-10-10	5500
1016	이이경	0603194234567	2015-01-20	1500
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ TBL_SAWON 테이블에서 사원의 이름에 『이』라는 글자가
--   하나라도 포함되어 있다면 그 사원의
--   사원번호, 사원명, 급여 항목을 조회한다.
SELECT SANO, SANAME, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이%';
-- 『%』 : 아무것도 없는 것도 인정됨
--==>>
/*
1003	이지연	3000
1004	이연주	4000
1005	오이삭	4000
1006	이현이	1000
1007	박한이	1000
1016	이이경	1500
*/


--○ TBL_SAWON 테이블에서 사원의 이름에 『이』라는 글자가
--   연속으로 두 번 들어있는 사원의
--   사원번호, 사원명, 급여 항목을 조회한다.
SELECT SANO, SANAME, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이이%';
--==>> 1016	이이경	1500


--○ TBL_SAWON 테이블에서 사원의 이름에 『이』라는 글자가 두 번 들어 있는 사원의
--   사원번호, 사원명, 급여 항목을 조회한다.
SELECT SANO, SANAME, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이%이%';
--==>>
/*
1006	이현이	1000
1016	이이경	1500
*/


--○ TBL_SAWON 테이블에서 사원 이름의 두 번째 글자가 『이』인 사원의
--   사원번호, 사원명, 급여 항목을 조회한다.
SELECT SANO, SANAME, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '_이%';
--==>>
/*
1005	오이삭	4000
1016	이이경	1500
*/


--○ TBL_SAWON 테이블에서 사원의 성씨가 『선』씨인 사원의
--   사원명, 주민번호, 급여 항목을 조회한다.
--   → 불가능~~!!!
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '선%';
--==>>
/*
선동렬	6803171234567	1500
선우용녀	6912232234567	1300
선우선	0303044234567	1600
*/
--> 작성할 수 없는 쿼리임
-- 선우용녀가 선씨인가? NO
-- 선우선은 성이 선우, 이름이 선인지 
--          성이 선,   이름이 우선인지 모름
-- 남씨인 사원 조회도 마찬가지! (남궁민)

--※ 데이터베이스 설계 과정에서
--   성과 이름을 분리하여 처리해야 할 업무 계획이 있다면
--   (지금 당장은 아니더라도...)
--   테이블에서 성 컬럼과 이름 컬럼을 분리하여 구성해야 한다.

--   SANAME 컬럼을 만드는 게 아니라,
--   성을 담는 컬럼과, 이름을 담는 컬럼을 따로따로 만들어야 한다.


--○ TBL_SAWON 테이블에서 여직원들의
--   사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME 사원명, JUBUN 주민번호, SAL 급여
FROM TBL_SAWON
WHERE JUBUN LIKE '______2%' OR JUBUN LIKE '______4%';

SELECT SANAME 사원명, JUBUN 주민번호, SAL 급여
FROM TBL_SAWON
WHERE JUBUN LIKE '______2______' OR JUBUN LIKE '______4______';
-- 이 경우에는 아래가 더 바람직함
-- 주민번호가 13자리일 경우라고 딱 정해놓은거니까
--==>>
/*
서민지	    9505152234567	4000
이지연	    9905192234567	3000
이연주	    9508162234567	4000
이현이	    8005132234567	1000
선우용녀	    6912232234567	1300
선우선	    0303044234567	1600
홍수민	    0005044234567	5200
임소민	    9711232234567	5500
이이경	    0603194234567	1500
*/


--○ 테이블 생성(TBL_WATCH)
CREATE TABLE TBL_WATCH
( WATCH_NAME    VARCHAR2(20)
, BIGO          VARCHAR2(100)
);
--==>> Table TBL_WATCH이(가) 생성되었습니다.

--○ 데이터 입력(TBL_WATCH)
INSERT INTO TBL_WATCH(WATCH_NAME, BIGO)
VALUES ('금시계', '순금 99.99% 함유된 최고급 시계');
--==>> 1 행 이(가) 삽입되었습니다.

INSERT INTO TBL_WATCH(WATCH_NAME, BIGO)
VALUES ('은시계', '고객 만족도 99.99점을 획득한 멋진 시계');
--==>> 1 행 이(가) 삽입되었습니다.

--○ 확인
SELECT *
FROM TBL_WATCH;
--==>>
/*
금시계	순금 99.99% 함유된 최고급 시계
은시계	고객 만족도 99.99점을 획득한 멋진 시계
*/

--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ TBL_WATCH 테이블의 BIGO(비고) 컬럼에
--   『99.99%』라는 글자가 포함된(들어있는) 행(레코드)의
--   데이터를 조회한다.
SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99%%';

SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99%%%';
--==>>
-- %가 몇개가 있던지 아무글자를 의미하기 때문에 소용없음
/*
금시계	순금 99.99% 함유된 최고급 시계
은시계	고객 만족도 99.99점을 획득한 멋진 시계
*/

SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99\%%' ESCAPE '\';
-- 사용빈도낮은 『\』를 % 앞에 붙여주고 
-- 『ESCAPE '\'』 : 『\』를 와일드캐릭터에서 탈출시켜준다.
--==>> 금시계	순금 99.99% 함유된 최고급 시계

SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99$%%' ESCAPE '$';
-- 사용빈도낮은 『$』를 % 앞에 붙여주고 
-- 『ESCAPE '$'』 : 『$』를 와일드캐릭터에서 탈출시켜준다.
--==>> 금시계	순금 99.99% 함유된 최고급 시계


SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99@%%' ESCAPE '@';
-- 사용빈도낮은 『@』를 % 앞에 붙여주고 
-- 『ESCAPE '@'』 : 『@』를 와일드캐릭터에서 탈출시켜준다.
--==>> 금시계	순금 99.99% 함유된 최고급 시계

--※ ESCAPE 로 정한 문자의 다음 한 글자를 와일드카드에서 탈출시켜라...
--   일반적으로 사용 빈도가 낮은 특수문자(특수기호)를 사용한다.


--------------------------------------------------------------------------------

--■■■ COMMIT / ROLLBACK ■■■--
--      -------------------
-->      TRANSACTION 하는 구문 → TCL 구문

SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
*/


--○ 데이터 입력
INSERT INTO TBL_DEPT VALUES(50, '개발부', '서울');
--==>> 1 행 이(가) 삽입되었습니다.


--○ 확인
SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/
-- 우리 눈에 데이터가 테이블 안에 들어간 것 처럼 보이니까,
-- 우리가 입력한 데이터가 테이블에 정말 들어간 것 처럼 보임

-- BUT,
-- 50 번 개발부 서울...
-- 이 데이터는 TBL_DEPT 테이블이 저장되어 있는
-- 하드디스크상에 물리적으로 적용되어 저장된 것이 아니다.
-- 메모리(RAM)상에 입력된 것이다.

-- 그래서 우리가 ROLLBACK 수행하게 되면, 데이터 입력 전으로 돌아감


--○ 롤백
ROLLBACK;
--==>> 롤백 완료.


--○ 다시 확인
SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
*/
--> 50번 개발부 서울... 에 대한 데이터가 소실되었음을 확인(존재하지 않음)


--○ 다시 데이터 입력
INSERT INTO TBL_DEPT VALUES(50, '개발부', '서울');
--==>> 1 행 이(가) 삽입되었습니다.

-- 50번 개발부 서울...
-- 이 데이터는 TBL_DEPT 테이블이 저장되어 있는 하드디스크상에 저장된 것이 아니라
-- 메모리(RAM) 상에 입력된 것이다.
-- 이를 실제 하드디스크상에 물리적으로 저장하기 위해서는
-- COMMIT 을 수행해야 한다.


--○ 확인
SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/


--○ 커밋
COMMIT;
--==>> 커밋 완료.


--○ 커밋 이후 다시 확인
SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/


--○ 커밋을 수행한 이후 롤백
ROLLBACK;
--==>> 롤백 완료.


--○ 롤백 이후 다시 확인
SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/
--> 롤백(ROLLBACK)을 수행했음에도 불구하고
--  50번 개발부 서울... 의 행 데이터는 소실되지 않았음을 확인

--※ COMMIT 을 실행한 이후로 DML 구문(INSERT, UPDATE, DELETE)을 통해
--   변경된 데이터를 취소할 수 있는 것일 뿐...
--   DML 구문을 사용한 후 COMMIT 을 하고 나서 ROLLBACK 을 실행해봐야
--   아무런 소용이 없다. 


--○ 데이터 수정(UPDATE → TBL_DEPT)
--   구조적 변경은 ALTER
--   데이터 변경은 UPDATE
--   작성순서 ①UPDATE ②WHERE ③SET
UPDATE TBL_DEPT 
SET DNAME = '연구부', LOC = '경기'
WHERE DEPTNO = 50;
--==>> 1 행 이(가) 업데이트되었습니다.


--○ 확인
SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	연구부	    경기
*/


--○ 롤백
ROLLBACK;
--==>> 롤백 완료.


--○ 롤백 수행 후 다시 확인
SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/

-- DML 내용을 실수할까봐 COMMIT 안하고 있었는데,
-- AUTO COMMIT 되는 구문 작성해버리면 자동으로 DML로 작성한 내용도 COMMIT 됨
-- --------------------
--  ex) GRANT

-- 바로바로 내용 확인하고 COMMIT 하는 습관 들이자


--○ 데이터 삭제(DELETE → TBL_DEPT)
DELETE TBL_DEPT
WHERE DEPTNO = 50;
-- 이렇게 해도 삭제 수행되지만,,!!

-- ***
-- 조회 먼저 하고 삭제 수행하기
SELECT *
FROM TBL_DEPT
WHERE DEPTNO = 50;
-- 삭제할 데이터를 직접 확인했으면,
-- 『SELECT *』만 『DELETE』로 바꿔주면 됨

DELETE
FROM TBL_DEPT
WHERE DEPTNO = 50;
--==>> 1 행 이(가) 삭제되었습니다.


--○ 확인
SELECT *
FROM TBL_DEPT;
--=>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
*/


--○ 롤백
ROLLBACK;
--==>> 롤백 완료.


--○ 롤백 이후 다시 확인
SELECT *
FROM TBL_DEPT;
--==>>
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/


--------------------------------------------------------------------------------

--■■■ ORDER BY 절 ■■■--

SELECT ENAME 사원명, DEPTNO 부서번호, JOB 직종, SAL 급여
    , SAL*12+NVL(COMM, 0) 연봉
FROM EMP;
--==>>
/*
SMITH	20	CLERK	     800	 9600
ALLEN	30	SALESMAN	1600	19500
WARD	30	SALESMAN	1250	15500
JONES	20	MANAGER	    2975	35700
MARTIN	30	SALESMAN	1250	16400
BLAKE	30	MANAGER	    2850	34200
CLARK	10	MANAGER	    2450	29400
SCOTT	20	ANALYST	    3000	36000
KING	10	PRESIDENT	5000	60000
TURNER	30	SALESMAN	1500	18000
ADAMS	20	CLERK	    1100	13200
JAMES	30	CLERK	     950	11400
FORD	20	ANALYST	    3000	36000
MILLER	10	CLERK	    1300	15600
*/


SELECT ENAME 사원명, DEPTNO 부서번호, JOB 직종, SAL 급여
    , SAL*12+NVL(COMM, 0) 연봉
FROM EMP
ORDER BY DEPTNO ASC;    -- DEPTNO   → 정렬 기준 : 부서번호
                        -- ASC      → 정렬 유형 : 오름차순
                        -- DESC     → 정렬 유형 : 내림차순
--==>>
/*
CLARK	10	MANAGER	    2450	29400
KING	10	PRESIDENT	5000	60000
MILLER	10	CLERK	    1300	15600

JONES	20	MANAGER	    2975	35700
FORD	20	ANALYST	    3000	36000
ADAMS	20	CLERK	    1100	13200
SMITH	20	CLERK	     800	 9600
SCOTT	20	ANALYST	    3000	36000

WARD	30	SALESMAN	1250	15500
TURNER	30	SALESMAN	1500	18000
ALLEN	30	SALESMAN	1600	19500
JAMES	30	CLERK	     950	11400
BLAKE	30	MANAGER	    2850	34200
MARTIN	30	SALESMAN	1250	16400
*/
-- 부서 기준으로 오름차순으로 정렬된 것 확인할 수 있음


SELECT ENAME 사원명, DEPTNO 부서번호, JOB 직종, SAL 급여
    , SAL*12+NVL(COMM, 0) 연봉
FROM EMP
ORDER BY DEPTNO; 
-- ORDER BY DEPTNO ASC; 결과와 동일하게 나옴
-- ASC(오름차순) 정렬유형은 생략 가능
-- 정렬 DEFAULT 값이 ASC (오름차순)


SELECT ENAME 사원명, DEPTNO 부서번호, JOB 직종, SAL 급여
    , SAL*12+NVL(COMM, 0) 연봉
FROM EMP
ORDER BY DEPTNO DESC; 
-- DESC(내림차순) 일 때는 반드시 명시해야 한다! → 생략 불가~!!!
--==>>
/*
BLAKE	30	MANAGER	    2850	34200
TURNER	30	SALESMAN	1500	18000
ALLEN	30	SALESMAN	1600	19500
MARTIN	30	SALESMAN	1250	16400
WARD	30	SALESMAN	1250	15500
JAMES	30	CLERK	     950	11400

SCOTT	20	ANALYST	    3000	36000
JONES	20	MANAGER	    2975	35700
SMITH	20	CLERK	     800	 9600
ADAMS	20	CLERK	    1100	13200
FORD	20	ANALYST	    3000	36000

KING	10	PRESIDENT	5000	60000
MILLER	10	CLERK	    1300	15600
CLARK	10	MANAGER	    2450	29400
*/

-- ORDER BY 와 함께 쓰이는 『DESC』는 『내림차순 정렬』 옵션
-- 그냥 『DESC』는 『DESCRIBE』 해주는거 


SELECT ENAME 사원명, DEPTNO 부서번호, JOB 직종, SAL 급여
    , SAL*12+NVL(COMM, 0) 연봉
FROM EMP
ORDER BY 연봉 DESC;   -- 여기에 『연봉』이라고 쓸 수 있는거 CHECK~!!!
--==>>
/*
KING	10	PRESIDENT	5000	60000
FORD	20	ANALYST	    3000	36000
SCOTT	20	ANALYST	    3000	36000
JONES	20	MANAGER	    2975	35700
BLAKE	30	MANAGER	    2850	34200
CLARK	10	MANAGER	    2450	29400
ALLEN	30	SALESMAN	1600	19500
TURNER	30	SALESMAN	1500	18000
MARTIN	30	SALESMAN	1250	16400
MILLER	10	CLERK	    1300	15600
WARD	30	SALESMAN	1250	15500
ADAMS	20	CLERK	    1100	13200
JAMES	30	CLERK	     950	11400
SMITH	20	CLERK	     800	 9600
*/
-- 만약 ORDER BY 가 SELECT 문 이전에 처리되면, 
-- SELECT 에서 어떤 별칭을 부여했는지 ORDER BY 절이 알 수 없음
-- BUT,
-- PARSING 순서가 SELECT → ORDER BY 이기 때문에,
-- ORDER BY 절이 SELECT 가 지정한 별칭을 알고 있음 !!!


--(컬럼인덱스) 1               2          3         4            5
SELECT ENAME 사원명, DEPTNO 부서번호, JOB 직종, SAL 급여, SAL*12+NVL(COMM, 0) 연봉
FROM EMP
ORDER BY 2;     -- 부서번호 오름차순
-- 컬럼 인덱스 활용해서, 부서번호로 오름차순 정렬됨   
-- ORDER BY 부서번호 (ASC); 
-- 라고 쓴 것과 동일한 의미 가짐
--> EMP 테이블이 갖고 있는 테이블의 고유한 컬럼 순서(2 → ENAME, 사원명)가 아니라
--  SELECT 처리되는 두 번째 컬럼(2 → DEPTNO, 부서번호)을 기준으로 정렬되는 것 확인
--  ASC 생략된 상태 → 오름차순 정렬되는 것을 확인
--  즉, 『ORDER BY 2』는 『ORDER BY DEPTNO ASC』
--==>>
/*
CLARK	10	MANAGER	    2450	29400
KING	10	PRESIDENT	5000	60000
MILLER	10	CLERK	    1300	15600
JONES	20	MANAGER 	2975	35700
FORD	20	ANALYST	    3000	36000
ADAMS	20	CLERK	    1100	13200
SMITH	20	CLERK	     800	 9600
SCOTT	20	ANALYST	    3000	36000
WARD	30	SALESMAN	1250	15500
TURNER	30	SALESMAN	1500	18000
ALLEN	30	SALESMAN	1600	19500
JAMES	30	CLERK	     950	11400
BLAKE	30	MANAGER	    2850	34200
MARTIN	30	SALESMAN	1250	16400
*/

SELECT ENAME, DEPTNO, JOB, SAL
FROM EMP
ORDER BY 2, 4;  -- DEPTNO, SAL 기준 ... ASC
--==>>
/*
MILLER	10	CLERK	    1300
CLARK	10	MANAGER	    2450
KING	10	PRESIDENT	5000

SMITH	20	CLERK	     800
ADAMS	20	CLERK	    1100
JONES	20	MANAGER	    2975
SCOTT	20	ANALYST	    3000
FORD	20	ANALYST	    3000

JAMES	30	CLERK	     950
MARTIN	30	SALESMAN	1250
WARD	30	SALESMAN	1250
TURNER	30	SALESMAN	1500
ALLEN	30	SALESMAN	1600
BLAKE	30	MANAGER	    2850
*/
-- 1차정렬 : 부서번호로 오름차순 정렬
-- 2차정렬 : 각 부서 안에서, 급여로 오름차순 정렬


SELECT ENAME, DEPTNO, JOB, SAL
FROM EMP
ORDER BY 2, 3, 4 DESC;
-- 1차정렬 : 2      → DETPNO(부서번호) 기준 오름차순 정렬
-- 2차정렬 : 3      → JOB(직종명) 기준 오름차순 정렬
-- 3차정렬 : 4 DESC → SAL(급여) 기준 내림차순 정렬
-- (3차 정렬 수행)
--==>>
/*
MILLER	10	CLERK	    1300
CLARK	10	MANAGER	    2450
KING	10	PRESIDENT	5000

SCOTT	20	ANALYST	    3000
FORD	20	ANALYST	    3000
ADAMS	20	CLERK	    1100
SMITH	20	CLERK	     800
JONES	20	MANAGER	    2975

JAMES	30	CLERK	     950
BLAKE	30	MANAGER	    2850
ALLEN	30	SALESMAN	1600
TURNER	30	SALESMAN	1500
MARTIN	30	SALESMAN	1250
WARD	30	SALESMAN	1250
*/


--------------------------------------------------------------------------------

--○ CONCAT()
SELECT ENAME || JOB "COL1"
     , CONCAT(ENAME, JOB) "COL2"
FROM EMP;
--==>>
/*
SMITHCLERK	    SMITHCLERK
ALLENSALESMAN	ALLENSALESMAN
WARDSALESMAN	WARDSALESMAN
JONESMANAGER	JONESMANAGER
MARTINSALESMAN	MARTINSALESMAN
BLAKEMANAGER	BLAKEMANAGER
CLARKMANAGER	CLARKMANAGER
SCOTTANALYST	SCOTTANALYST
KINGPRESIDENT	KINGPRESIDENT
TURNERSALESMAN	TURNERSALESMAN
ADAMSCLERK	    ADAMSCLERK
JAMESCLERK	    JAMESCLERK
FORDANALYST	    FORDANALYST
MILLERCLERK	    MILLERCLERK
*/
-- PIPE(||)로 묶어주나, CONCAT() 으로 묶어주나 결과 동일함

-- 문자열을 결합하는 기능을 가진 함수 CONCAT()
-- 오로지 2개의 문자열만 결합시켜줄 수 있다.


SELECT ENAME || JOB || DEPTNO "COL1"
     , CONCAT(ENAME, JOB, DEPTNO) "COL2"
FROM EMP;
--==>> 에러 발생
--     (ORA-00909: invalid number of arguments)
--     '매개변수 개수 잘못되면 이런 에러 발생하는구나' 알아두기

-- CONCAT() 은 매개변수 2개 밖에 못받지만,
-- 함수는 중첩해서 사용 가능하다.

SELECT ENAME || JOB || DEPTNO "COL1"
     , CONCAT(CONCAT(ENAME, JOB), DEPTNO) "COL2"
FROM EMP;
--==>>
/*
SMITHCLERK20	    SMITHCLERK20
ALLENSALESMAN30	    ALLENSALESMAN30
WARDSALESMAN30	    WARDSALESMAN30
JONESMANAGER20	    JONESMANAGER20
MARTINSALESMAN30	MARTINSALESMAN30
BLAKEMANAGER30	    BLAKEMANAGER30
CLARKMANAGER10	    CLARKMANAGER10
SCOTTANALYST20	    SCOTTANALYST20
KINGPRESIDENT10	    KINGPRESIDENT10
TURNERSALESMAN30	TURNERSALESMAN30
ADAMSCLERK20	    ADAMSCLERK20
JAMESCLERK30	    JAMESCLERK30
FORDANALYST20	    FORDANALYST20
MILLERCLERK10	    MILLERCLERK10
*/

--> 내부적인 형 변환이 일어나며 결합을 수행하게 된다.
--  CONCAT() 은 문자열과 문자열을 결합시켜주는 함수이지만
--  내부적으로 숫자나 날짜를 문자로 바꾸어주는 과정이 포함되어 있다.

/*
자바에서,
obj.substring();
---
 |
 문자열.substring(n, m);
                 ------
                 n 부터 m-1 까지... (인덱스는 0부터)
                 
오라클에서 substring() 같은 함수있는데,
자바와 방법 다르니 잘 비교해서 알아두기 ~!!!
*/


--○ SUBSTR() 추출 개수 기반 / SUBSTRB() 추출 바이트 기반
--   바이트는 인코딩에 따라 달라지므로, SUBSTR() 로 많이 씀
SELECT ENAME "COL1"
     , SUBSTR(ENAME, 1, 2) "COL2"
FROM EMP;
--> 문자열을 추출하는 기능을 가진 함수
--  첫 번째 파라미터 값은 대상 문자열(추출의 대상, TARGET)
--  두 번째 파라미터 값은 추출을 시작하는 위치(인덱스는 1부터 시작)
--  세 번째 파라미터 값은 추출할 문자열의 개수(생략 시... 끝까지)
--==>>
/*
SMITH	SM
ALLEN	AL
WARD	WA
JONES	JO
MARTIN	MA
BLAKE	BL
CLARK	CL
SCOTT	SC
KING	KI
TURNER	TU
ADAMS	AD
JAMES	JA
FORD	FO
MILLER	MI
*/


--○ TBL_SAWON 테이블에서 성별이 남성인 사원만
--   사원번호, 사원명, 주민번호, 급여 항목을 조회한다.
--   단, SUBSTR() 함수를 활용할 수 있도록 한다.
SELECT SANO 사원번호, SANAME 사원명, JUBUN 주민번호, SAL 급여
FROM TBL_SAWON
WHERE SUBSTR(JUBUN, 7, 1) = 1 OR SUBSTR(JUBUN, 7, 1) = 3;

-- 문자타입이기 때문에 위에처럼해도 문자로 형변환해서 이루어짐
-- 아래처럼 작성하는게 더 맞는 방법

SELECT SANO 사원번호, SANAME 사원명, JUBUN 주민번호, SAL 급여
FROM TBL_SAWON
WHERE SUBSTR(JUBUN, 7, 1) = '1' OR SUBSTR(JUBUN, 7, 1) = '3';

SELECT SANO 사원번호, SANAME 사원명, JUBUN 주민번호, SAL 급여
FROM TBL_SAWON
WHERE SUBSTR(JUBUN, 7, 1) IN ('1', '3');
--==>>
/*
1001	김민성	9707251234567	3000
1005	오이삭	9805161234567	4000
1007	박한이	0204053234567	1000
1008	선동렬	6803171234567	1500
1011	남주혁	0506073234567	2600
1012	남궁민	0208073234567	2600
1013	남진	6712121234567	2200
*/


--○ LENGTH() 글자 수 / LENGTHB() 바이트 수
SELECT ENAME "COL1"
     , LENGTH(ENAME) "COL2"
     , LENGTHB(ENAME) "COL3"
FROM EMP;
--==>>
/*
SMITH	5	5
ALLEN	5	5
WARD	4	4
JONES	5	5
MARTIN	6	6
BLAKE	5	5
CLARK	5	5
SCOTT	5	5
KING	4	4
TURNER	6	6
ADAMS	5	5
JAMES	5	5
FORD	4	4
MILLER	6	6
*/

SELECT *
FROM NLS_DATABASE_PARAMETERS;
--==>>
/*
NLS_LANGUAGE	            AMERICAN
NLS_TERRITORY	            AMERICA
NLS_CURRENCY	            $
NLS_ISO_CURRENCY	        AMERICA
NLS_NUMERIC_CHARACTERS	    .,
NLS_CHARACTERSET	        AL32UTF8
NLS_CALENDAR	            GREGORIAN
NLS_DATE_FORMAT	            DD-MON-RR
NLS_DATE_LANGUAGE	        AMERICAN
NLS_SORT	                BINARY
NLS_TIME_FORMAT	            HH.MI.SSXFF AM
NLS_TIMESTAMP_FORMAT	    DD-MON-RR HH.MI.SSXFF AM
NLS_TIME_TZ_FORMAT	        HH.MI.SSXFF AM TZR
NLS_TIMESTAMP_TZ_FORMAT	    DD-MON-RR HH.MI.SSXFF AM TZR
NLS_DUAL_CURRENCY	        $
NLS_COMP	                BINARY
NLS_LENGTH_SEMANTICS	    BYTE
NLS_NCHAR_CONV_EXCP	        FALSE
NLS_NCHAR_CHARACTERSET	    AL16UTF16
NLS_RDBMS_VERSION	        11.2.0.2.0
*/


--○ INSTR() : TARGET 문자열에서 찾고자 하는 문자열의 첫번째 인덱스를 반환
--> 첫 번째 파라미터 값에 해당하는 문자열에서... (대상 문자열, TARGET)
--  두 번째 파라미터 값을 통해 넘겨준 문자열이 등장하는 위치를 찾아라~!!!
--  세 번째 파라미터 값은 찾기 시작하는(스캔을 시작하는) 위치
--                  (→ 음수일 경우 뒤에서부터 스캔)
--                  (→ 1은 생략 가능)      
--  네 번째 파라미터 값은 몇 번째 등장하는 값을 찾을 것인지에 대한 설정
--                  (→ 1은 생략 가능)
SELECT 'ORACLE ORAHOME BIORA' "COL1"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 1, 1) "COL2"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 1, 2) "COL3"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2, 1) "COL4"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2) "COL5"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2, 3) "COL6"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', -3) "COL7"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', -4) "COL8"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', -4, 2) "COL9"
FROM DUAL;
--==>> ORACLE ORAHOME BIORA	1	8	8	8	0	18	8	1
-- COL2 → 『'ORACLE ORAHOME BIORA' 에서 'ORA' 를 1번 인덱스부터 스캔하며 찾는데,
--  첫 번째 등장하는 값의 위치를 반환해라』 의미 
-- COL2 → 『'ORACLE ORAHOME BIORA' 에서 'ORA' 를 1번 인덱스부터 스캔하며 찾는데,
--  두 번째 등장하는 값의 위치를 반환해라』 의미 
-- COL6 → 2번 인덱스부터 스캔하므로,
-- 첫번째 ORA는 ORAHOME, 두번째 ORA가 BIORA 가 되고,
-- 세번째 ORA는 없음 → 그러므로 0 반환


SELECT '나의오라클 집으로오라 합니다.' "COL1"
     , INSTR('나의오라클 집으로오라 합니다.', '오라', 1) "COL2"
     , INSTR('나의오라클 집으로오라 합니다.', '오라', 2) "COL3"
     , INSTR('나의오라클 집으로오라 합니다.', '오라', 10) "COL4"
     , INSTR('나의오라클 집으로오라 합니다.', '오라', 11) "COL5"
FROM DUAL;
--==>> 나의오라클 집으로오라 합니다.	3	3	10	0
--> 마지막 파라미터 값을 생략한 형태로 사용 → 마지막 파라미터 → 1


--○ REVERSE() : 대상 문자열을 거꾸로 반환한다. (단, 한글은 제외)
--               바이트를 기반으로 거꾸로 묶는거기 때문에, 한글은 안됨...
SELECT 'ORACLE' "COL1"
     , REVERSE('ORACLE') "COL2"
     , REVERSE('오라클') "COL3"    -- 깨져서 나옴
FROM DUAL;
--==>> ORACLE	ELCARO	???


--○ 실습 테이블 생성(TBL_FILES)
CREATE TABLE TBL_FILES
( FILENO    NUMBER(3)
, FILENAME  VARCHAR2(100)
);
--==>> Table TBL_FILES이(가) 생성되었습니다.


--○ 데이터 입력(TBL_FILES)
INSERT INTO TBL_FILES VALUES(1, 'C:\AAA\BBB\CCC\SALES.DOC');
INSERT INTO TBL_FILES VALUES(2, 'C:\AAA\PANMAE.XXLS');
INSERT INTO TBL_FILES VALUES(3, 'D:\RESEARCH.PPT');
INSERT INTO TBL_FILES VALUES(4, 'C:\DOCUMENTS\STUDY.HWP');
INSERT INTO TBL_FILES VALUES(5, 'C:\DOCUMENTS\TEMP\SQL.TXT');
INSERT INTO TBL_FILES VALUES(6, 'D:\SHARE\F\TEST.PNG');
INSERT INTO TBL_FILES VALUES(7, 'E:\STUDY\ORACLE.SQL');
--==> 1 행 이(가) 삽입되었습니다. * 7


--○ 확인
SELECT *
FROM TBL_FILES;
--==>>
/*
1	C:\AAA\BBB\CCC\SALES.DOC
2	C:\AAA\PANMAE.XXLS
3	D:\RESEARCH.PPT
4	C:\DOCUMENTS\STUDY.HWP
5	C:\DOCUMENTS\TEMP\SQL.TXT
6	D:\SHARE\F\TEST.PNG
7	E:\STUDY\ORACLE.SQL
*/


--○ 커밋
COMMIT;
--==>> 커밋 완료.


SELECT FILENO "파일번호"
     , FILENAME "파일명"
FROM TBL_FILES;
--==>>
/*
1	C:\AAA\BBB\CCC\SALES.DOC
2	C:\AAA\PANMAE.XXLS
3	D:\RESEARCH.PPT
4	C:\DOCUMENTS\STUDY.HWP
5	C:\DOCUMENTS\TEMP\SQL.TXT
6	D:\SHARE\F\TEST.PNG
7	E:\STUDY\ORACLE.SQL
*/


--○ TBL_FILES 테이블을
--   다음과 같이 조회될 수 있도록 쿼리문을 구성한다.
/*
1	SALES.DOC
2	PANMAE.XXLS
3	RESEARCH.PPT
4	STUDY.HWP
5	SQL.TXT
6	TEST.PNG
7	ORACLE.SQL
*/
-- 나
SELECT FILENO 파일번호, 
    SUBSTR(FILENAME, INSTR(FILENAME, '\', -1) + 1) 파일명
FROM TBL_FILES;

-- 쌤
SELECT FILENO "파일번호"
     , REVERSE(SUBSTR(REVERSE(FILENAME), 1, INSTR(REVERSE(FILENAME), '\', 1) - 1)) "파일명"
FROM TBL_FILES;
--==>>
/*
1	SALES.DOC
2	PANMAE.XXLS
3	RESEARCH.PPT
4	STUDY.HWP
5	SQL.TXT
6	TEST.PNG
7	ORACLE.SQL
*/
-- 이렇게 했다고 TBL_FILES 내용 변한거 아님
-- 열람만 이렇게 한 거임

-- LPAD(), RPAD() 함수는 2번째 파라미터값을 먼저 보기!
--○ LPAD()
--> Byte 를 확보하여 왼쪽부터 문자로 채우는 기능을 가진 함수
SELECT 'ORACLE' "COL1"
     , LPAD('ORACLE', 10, '*') "COL2"
FROM DUAL;
--==>> ORACLE	****ORACLE
-- LPAD('ORACLE', 10, '*')
-- → 공간을 10만큼 확보해라
--    그런다음 1번째 파라미터 값(ORACLE)을 그 공간에 넣음
--    확보한 공간은 10Byte인데 넣은건 6Byte
--    남아있는 공간 왼쪽부터 4Byte는 '*' 로 채움
--    → 결과 : ****ORACLE
--> ① 10Byte 공간을 확보한다.                 → 두 번째 파라미터 값에 의해...
--  ② 확보한 공간에 'ORACLE' 문자열을 담는다.  → 첫 번째 파라미터 값에 의해...
--  ③ 남아있는 Byte 공간을 『왼쪽』부터 세 번째 파라미터 값으로 채운다.
--  ④ 이렇게 구성된 최종 결과값을 반환한다.


--○ RPAD()
--> Byte 를 확보하여 오른쪽부터 문자로 채우는 기능을 가진 함수
SELECT 'ORACLE' "COL1"
     , RPAD('ORACLE', 10, '*') "COL2"
FROM DUAL;
--==>> ORACLE	ORACLE****
--> ① 10Byte 공간을 확보한다.                 → 두 번째 파라미터 값에 의해...
--  ② 확보한 공간에 'ORACLE' 문자열을 담는다.  → 첫 번째 파라미터 값에 의해...
--  ③ 남아있는 Byte 공간을 『오른쪽』부터 세 번째 파라미터 값으로 채운다.
--  ④ 이렇게 구성된 최종 결과값을 반환한다.


-- 자바에 trim() 있었음
-- 오라클에는 trim()은 없지만, LTRIM(), RTRIM() 있다.
--○ LTRIM()
--> 첫 번째 파라미터 값에 해당하는 문자열을 대상으로
--  왼쪽부터 연속적으로 등장하는 두 번째 파라미터 값에서 지정한 글자와
--  같은 글자가 등장할 경우 이를 제거한 결과값을 반환한다.
--  단, 완성형으로 처리되지 않는다.
--  ('ORA'라고 한다고, 'ORA' 한 뭉텅이로 보는 게 아니라,
--   'O', 'R', 'A' 로 본다는 뜻)
SELECT 'ORAORAORACLEORACLE' "COL1"      -- 오라 오라 오라클 오라클
     , LTRIM('ORAORAORACLEORACLE', 'ORA') "COL2"
     , LTRIM('AAAAAAAAAAAORAORAORACLEORACLE', 'ORA') "COL3"
     , LTRIM('ORAoRAORACLEORACLE', 'ORA') "COL4"
     , LTRIM('ORAORA ORACLEORACLE', 'ORA') "COL5"
     , LTRIM('               ORACLE', ' ') "COL6"
     , LTRIM('               ORACLE') "COL7"
FROM DUAL;
--==>> 
/*
ORAORAORACLEORACLE	
CLEORACLE	
CLEORACLE	
oRAORACLEORACLE	
 ORACLEORACLE	
ORACLE	
ORACLE
*/
-- COL2 → ORA 완성형으로 자르는게 아니라,
--         O 있으면 자르고, R 있으면 자르고, A 있으면 자르는거
--         앞에 AAAAAAA 있어도 자름 → A 있으면 자르니까
-- COL4 → O, R, A 는 'ORA'에 있으니까 자르고,
--         o는 없으니까 자르는거 그만두고 반환함
-- COL5 → 공백바로 앞까지 자르고 반환
-- COL6 → 공백제거함수로 쓰임
-- COL7 → 공백을 제거하려고 할 때는, 두 번째 파라미터 값(' ') 생략 가능


SELECT LTRIM('이김신이김신이김김신신신이김김김이신김신이박이김신', '이김신') "RESULT"
FROM DUAL;
--==>> 박이김신


--○ RTRIM()
--> 첫 번째 파라미터 값에 해당하는 문자열을 대상으로
--  오른쪽부터 연속적으로 등장하는 두 번째 파라미터 값에서 지정한 글자와
--  같은 글자가 등장할 경우 이를 제거한 결과값을 반환한다.
--  단, 완성형으로 처리되지 않는다.


--○ TRANSLATE()
--> 1:1로 바꿔준다.
-- 1번째 파라미터 값 : 대상(TARGET)
SELECT TRANSLATE('MY ORACLE SERVER'
               , 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') "RESULT"
--                 -------------------------    ---------------------------
--                      얘랑                      얘랑  1:1로 바꿔줌
FROM DUAL;
--==>> my oracle server
-- 대문자 M이 등장하니까, 
-- 2번째 파라미터 값에서의 대문자 M과 1:1로 대응하는 
-- 3번째 파라미터 값에서의 소문자 M으로 바꿈
-- 대문자 Y가 등장하니까, 
-- 2번째 파라미터 값에서의 대문자 Y와 1:1로 대응하는 
-- 3번째 파라미터 값에서의 소문자 Y로 바꿈
-- 공백등장 -> 공백은 2번째 파라미터 값에 없음 -> 못바꾸니까 그냥 내버려둠

SELECT TRANSLATE('010-2731-3153'
               , '0123456789'
               , '영일이삼사오육칠팔구') "RESULT"
FROM DUAL;
--==>> 영일영-이칠삼일-삼일오삼


--○ REPLACE() : 뭉텅이 뭉텅이로 바꿔줌
SELECT REPLACE('MY ORACLE SERVER ORAHOME', 'ORA', '오라') "RESULT"
FROM DUAL;
--==>> MY 오라CLE SERVER 오라HOME
-- REPLACE('MY ORACLE SERVER ORAHOME', 'ORA', '오라')
-- → 'MY ORACLE SERVER ORAHOME'에서 'ORA'찾아서 '오라'로 바꿔라


---------------------------- 문자 관련 함수 끝 ----------------------------------



