SELECT USER
FROM DUAL;
--==>> SCOTT


--○ 20220310_01_scott(plsql).sql 파일에서 
--   FN_PAY() 함수 생성 후 테스트
SELECT NUM "사원번호", NAME "사원명", BASICPAY 기본급, SUDANG 수당
     , FN_PAY(BASICPAY, SUDANG) 연봉
FROM TBL_INSA;
--==>
/*
1001	홍길동	2610000	200000	31520000
1002	이순신	1320000	200000	16040000
1003	이순애	2550000	160000	30760000
1004	김정훈	1954200	170000	23620400
1005	한석봉	1420000	160000	17200000
1006	이기자	2265000	150000	27330000
1007	장인철	1250000	150000	15150000
1008	김영년	950000	145000	11545000
1009	나윤균	840000	220400	10300400
1010	김종서	2540000	130000	30610000
1011	유관순	1020000	140000	12380000
1012	정한국	880000	114000	10674000
1013	조미숙	1601000	103000	19315000
1014	황진이	1100000	130000	13330000
1015	이현숙	1050000	104000	12704000
1016	이상헌	2350000	150000	28350000
1017	엄용수	950000	210000	11610000
1018	이성길	880000	123000	10683000
1019	박문수	2300000	165000	27765000
1020	유영희	880000	140000	10700000
1021	홍길남	875000	120000	10620000
1022	이영숙	1960000	180000	23700000
1023	김인수	2500000	170000	30170000
1024	김말자	1900000	170000	22970000
1025	우재옥	1100000	160000	13360000
1026	김숙남	1050000	150000	12750000
1027	김영길	2340000	170000	28250000
1028	이남신	892000	110000	10814000
1029	김말숙	920000	124000	11164000
1030	정정해	2304000	124000	27772000
1031	지재환	2450000	160000	29560000
1032	심심해	880000	108000	10668000
1033	김미나	1020000	104000	12344000
1034	이정석	1100000	160000	13360000
1035	정영희	1050000	140000	12740000
1036	이재영	960400	190000	11714800
1037	최석규	2350000	187000	28387000
1038	손인수	2000000	150000	24150000
1039	고순정	2010000	160000	24280000
1040	박세열	2100000	130000	25330000
1041	문길수	2300000	150000	27750000
1042	채정희	1020000	200000	12440000
1043	양미옥	1100000	210000	13410000
1044	지수환	1060000	220000	12940000
1045	홍원신	960000	152000	11672000
1046	허경운	2650000	150000	31950000
1047	산마루	2100000	112000	25312000
1048	이기상	2050000	106000	24706000
1049	이미성	1300000	130000	15730000
1050	이미인	1950000	103000	23503000
1051	권영미	2260000	104000	27224000
1052	권옥경	1020000	105000	12345000
1053	김싱식	960000	108000	11628000
1054	정상호	980000	114000	11874000
1055	정한나	1000000	104000	12104000
1056	전용재	1950000	200000	23600000
1057	이미경	2520000	160000	30400000
1058	김신제	1950000	180000	23580000
1059	임수봉	890000	102000	10782000
1060	김신애	900000	102000	10902000
*/


--○ 20220310_01_scott(plsql).sql 파일에서 
--   FN_WORKYEAR() 함수 생성 후 테스트
SELECT NUM "사원번호", NAME "사원명", IBSADATE "입사일"
     , FN_WORKYEAR(IBSADATE) "근무년수"
FROM TBL_INSA;
--==>>
/*
1001	홍길동	1998-10-11	23.4
1002	이순신	2000-11-29	21.2
1003	이순애	1999-02-25	23
1004	김정훈	2000-10-01	21.4
1005	한석봉	2004-08-13	17.5
1006	이기자	2002-02-11	20
1007	장인철	1998-03-16	23.9
1008	김영년	2002-04-30	19.8
1009	나윤균	2003-10-10	18.4
1010	김종서	1997-08-08	24.5
1011	유관순	2000-07-07	21.6
1012	정한국	1999-10-16	22.4
1013	조미숙	1998-06-07	23.7
1014	황진이	2002-02-15	20
1015	이현숙	1999-07-26	22.6
1016	이상헌	2001-11-29	20.2
1017	엄용수	2000-08-28	21.5
1018	이성길	2004-08-08	17.5
1019	박문수	1999-12-10	22.2
1020	유영희	2003-10-10	18.4
1021	홍길남	2001-09-07	20.5
1022	이영숙	2003-02-25	19
1023	김인수	1995-02-23	27
1024	김말자	1999-08-28	22.5
1025	우재옥	2000-10-01	21.4
1026	김숙남	2002-08-28	19.5
1027	김영길	2000-10-18	21.3
1028	이남신	2001-09-07	20.5
1029	김말숙	2000-09-08	21.5
1030	정정해	1999-10-17	22.3
1031	지재환	2001-01-21	21.1
1032	심심해	2000-05-05	21.8
1033	김미나	1998-06-07	23.7
1034	이정석	2005-09-26	16.4
1035	정영희	2002-05-16	19.8
1036	이재영	2003-08-10	18.5
1037	최석규	1998-10-15	23.4
1038	손인수	1999-11-15	22.3
1039	고순정	2003-12-28	18.2
1040	박세열	2000-09-10	21.5
1041	문길수	2001-12-10	20.2
1042	채정희	2003-10-17	18.3
1043	양미옥	2003-09-24	18.4
1044	지수환	2004-01-21	18.1
1045	홍원신	2003-03-16	18.9
1046	허경운	1999-05-04	22.8
1047	산마루	2001-07-15	20.6
1048	이기상	2001-06-07	20.7
1049	이미성	2000-04-07	21.9
1050	이미인	2003-06-07	18.7
1051	권영미	2000-06-04	21.7
1052	권옥경	2000-10-10	21.4
1053	김싱식	1999-12-12	22.2
1054	정상호	1999-10-16	22.4
1055	정한나	2004-06-07	17.7
1056	전용재	2004-08-13	17.5
1057	이미경	1998-02-11	24
1058	김신제	2003-08-08	18.5
1059	임수봉	2001-10-10	20.4
1060	김신애	2001-10-10	20.4
*/


--○ 쌤 VER ① 몇년 몇개월로 구성해보기
--   20220310_01_scott(plsql).sql 파일에서 
--   FN_WORKYEAR() 함수 생성 후 테스트
SELECT NUM "사원번호", NAME "사원명", IBSADATE "입사일"
     , FN_WORKYEAR(IBSADATE) "근무년수"
FROM TBL_INSA;
--==>>
/*
1001	홍길동	1998-10-11	23년 4개월
1002	이순신	2000-11-29	21년 3개월
1003	이순애	1999-02-25	23년 0개월
1004	김정훈	2000-10-01	21년 5개월
1005	한석봉	2004-08-13	17년 6개월
1006	이기자	2002-02-11	20년 0개월
1007	장인철	1998-03-16	23년 11개월
1008	김영년	2002-04-30	19년 10개월
1009	나윤균	2003-10-10	18년 5개월
1010	김종서	1997-08-08	24년 7개월
1011	유관순	2000-07-07	21년 8개월
1012	정한국	1999-10-16	22년 4개월
1013	조미숙	1998-06-07	23년 9개월
1014	황진이	2002-02-15	20년 0개월
1015	이현숙	1999-07-26	22년 7개월
1016	이상헌	2001-11-29	20년 3개월
1017	엄용수	2000-08-28	21년 6개월
1018	이성길	2004-08-08	17년 7개월
1019	박문수	1999-12-10	22년 3개월
1020	유영희	2003-10-10	18년 5개월
1021	홍길남	2001-09-07	20년 6개월
1022	이영숙	2003-02-25	19년 0개월
1023	김인수	1995-02-23	27년 0개월
1024	김말자	1999-08-28	22년 6개월
1025	우재옥	2000-10-01	21년 5개월
1026	김숙남	2002-08-28	19년 6개월
1027	김영길	2000-10-18	21년 4개월
1028	이남신	2001-09-07	20년 6개월
1029	김말숙	2000-09-08	21년 6개월
1030	정정해	1999-10-17	22년 4개월
1031	지재환	2001-01-21	21년 1개월
1032	심심해	2000-05-05	21년 10개월
1033	김미나	1998-06-07	23년 9개월
1034	이정석	2005-09-26	16년 5개월
1035	정영희	2002-05-16	19년 9개월
1036	이재영	2003-08-10	18년 7개월
1037	최석규	1998-10-15	23년 4개월
1038	손인수	1999-11-15	22년 3개월
1039	고순정	2003-12-28	18년 2개월
1040	박세열	2000-09-10	21년 6개월
1041	문길수	2001-12-10	20년 3개월
1042	채정희	2003-10-17	18년 4개월
1043	양미옥	2003-09-24	18년 5개월
1044	지수환	2004-01-21	18년 1개월
1045	홍원신	2003-03-16	18년 11개월
1046	허경운	1999-05-04	22년 10개월
1047	산마루	2001-07-15	20년 7개월
1048	이기상	2001-06-07	20년 9개월
1049	이미성	2000-04-07	21년 11개월
1050	이미인	2003-06-07	18년 9개월
1051	권영미	2000-06-04	21년 9개월
1052	권옥경	2000-10-10	21년 5개월
1053	김싱식	1999-12-12	22년 2개월
1054	정상호	1999-10-16	22년 4개월
1055	정한나	2004-06-07	17년 9개월
1056	전용재	2004-08-13	17년 6개월
1057	이미경	1998-02-11	24년 0개월
1058	김신제	2003-08-08	18년 7개월
1059	임수봉	2001-10-10	20년 5개월
1060	김신애	2001-10-10	20년 5개월
*/


--------------------------------------------------------------------------------
-- 20220310_01_scott(plsql).sql 267 line 작성하고 옴

--※ 프로시저 관련 실습을 위한 준비

-- 실습 테이블 생성
CREATE TABLE TBL_STUDENTS
( ID    VARCHAR2(10)
, NAME  VARCHAR2(40)
, TEL   VARCHAR2(30)
, ADDR  VARCHAR2(100)
, CONSTRAINT STUDENTS_ID_PK PRIMARY KEY(ID)
);
--==>> Table TBL_STUDENTS이(가) 생성되었습니다.


-- 실습 테이블 생성
CREATE TABLE TBL_IDPW
( ID    VARCHAR2(10)
, PW    VARCHAR2(20)
, CONSTRAINT IDPW_ID_PK PRIMARY KEY(ID)
);
--==>> Table TBL_IDPW이(가) 생성되었습니다.

/*
학생 테이블이
| 아이디  이름  전화  주소  패스워드  |    이렇게 있었음

로그인 할 때, 아이디 & 패스워드 입력한 거 비교해서 
로그인 성공/실패 나눌거임

그러다보니, 아이디와 패스워드 2개의 컬럼 계속 확인해야 한다.
그런데 저 2개 확인하는 과정에서
불필요하게 이름, 전화, 주소도 계속 퍼올려짐....

→ 그래서 로그인과 관련된
   | 아이디  패스워드 |   테이블을 별도로 만들어놓으면
   아이디 패스워드 비교해서 로그인 성공인지 거부인지 저것만 조회해보면 됨
   
   대신에 그 아이디가 누구꺼인지 알아야 되니까,
   학생 테이블에서 아이디 확인해서 누구인지 봐야함
   → 학생 테이블과 로그인 테이블의 관계 → 1 : 1 관계
   
   1 : 1 관계 → 바람직하지 않은 구조...
   
   지금은 프로시저 기능에 대해 자세히 와닿게 설명 위해,
   이렇게 만들어놓은 거다!
*/


-- 두 테이블에 데이터 입력
INSERT INTO TBL_STUDENTS(ID, NAME, TEL, ADDR)
VALUES('happy', '이시우', '010-1111-1111', '제주도 서귀포시');
INSERT INTO TBL_IDPW(ID, PW)
VALUES('happy', 'java006$');
--==>> 1 행 이(가) 삽입되었습니다. * 2


-- 확인
SELECT *
FROM TBL_STUDENTS;
--==>> happy	이시우	010-1111-1111	제주도 서귀포시

SELECT *
FROM TBL_IDPW;
--==>> happy	java006$


-- 커밋
COMMIT;
--==>> 커밋 완료.


-- 테이블을 이런 식으로 만들었는데,
-- TBL_STUDENTS 에는 시우 데이터가 있는데,
-- TBL_IDPW 에는 시우 데이터가 없다던지,
-- 아니면
-- TBL_STUDENTS 에도 시우 데이터 있고, TBL_IDPW에도 시우 데이터 있는데
-- 두 데이터가 내용이 다르면 → 큰 문제가 생김

-- 회원가입 시에, 양쪽 테이블에 정보가 한꺼번에 다 입력되어야 한다.
-- 그렇게 다 들어간게 양쪽 테이블에서 똑같이 유지되고 보관되어야만
-- 이 테이블 구조는 이상없이 돌아갈 수 있게 된다.
-- → 이럴 때 사용하는 게 PROCEDURE

-- 이렇게 테이블에 따로따로 INSERT 해서 쓰게 되면
-- 데이터 입력하는 과정에서 오타나면, 
-- STUDENTS 에는 happy 로 해놓고, IDPW 에는 happt 로 되어있다면....
-- STUDENTS 에는 있는데, IDPW 없다고 나오고
-- 분명 시우 데이터 있는데 로그인 절대 불가하게 됨......


-- 위의 업무를 수행하는 프로시저(INSERT 프로시저, 입력 프로시저)를 생성하게 되면
-- 『EXEC PRC_STUDENT_INSERT('happy', 'java006$', '이시우', '010-1111-1111', '제주 서귀포시');』
-- 이와 같은 구문 한 줄로 양쪽 테이블 모두 제대로 데이터를 입력할 수 있다.

--※ 프로시저를 생성하는 구문은
--   『20220310_01_scott(plsql).sql』 파일 참조~!!!


-- 20220310_01_scott(plsql).sql 303 line 작성하고 옴

--○ 프로시저 생성 후 실행
EXEC PRC_STUDENT_INSERT('rainbow', 'java006$', '김정용', '010-2222-2222', '서울 강남구');
--==>> PL/SQL 프로시저가 성공적으로 완료되었습니다.
-- 프로시저 한 번 실행한걸로 두 개의 테이블에 각각 INSERT 되었다!


--○ 프로시저 호출 이후 확인
SELECT *
FROM TBL_IDPW;
--==>>
/*
happy	java006$
rainbow	java006$
*/

SELECT *
FROM TBL_STUDENTS;
--==>>
/*
happy	이시우	010-1111-1111	제주도 서귀포시
rainbow	김정용	010-2222-2222	서울 강남구
*/


--○ 실습 테이블 생성(TBL_SUNGJUK)
CREATE TABLE TBL_SUNGJUK
( HAKBUN    NUMBER  -- 그냥 SEQUENCE 형태로 처리하려고 NUMBER 로 처리함
                    -- 원래는 학번 NUMBER로 처리하면 안된다!!!
, NAME      VARCHAR2(40)                    
, KOR       NUMBER(3)
, ENG       NUMBER(3)
, MAT       NUMBER(3)
, CONSTRAINT SUNGJUK_HAKBUN_PK  PRIMARY KEY(HAKBUN)
);
--==>> Table TBL_SUNGJUK이(가) 생성되었습니다.


--※ 생성된 테이블 구조 변경 → 컬럼 추가
--   (총점 → TOT, 평균 → AVG, 등급 → GRADE)

-- *** 많이 실수하는 부분이라 찐~하게 전달하고 넘어감!!!!! ***

--※ 여기서 추가한 컬럼에 대한 항목은
--   프로시저 실습을 위한 추가항목일 뿐
--   실제 테이블 구조에 적합하지도, 바람직하지도 않은 내용이다~!!!   CHECK~!!!

--==>> 기존 테이블의 데이터를 활용하여 얻을 수 있는 데이터는
--     즉, 쿼리문을 통해 얻어낼 수 있는 데이터는
--     절대 테이블에 추가로 구성(테이블 내에 컬럼화)하지 않는다 !!

--ex1) 점수 테이블 → 총점, 평균, 등급..
--     총점, 평균, 등급은 쿼리로 충분히 얻어낼 수 있는 부분 
--     → 이런 건 테이블에 컬럼화하지 않는다!!!
--     만약 국어 90 수학 90 영어 90 점인데 총점 컬럼에 50이라고 들어가있으면,
--     저 테이블 데이터의 정확성에 대한 신뢰도 다 떨어짐

-- ex2)
-- 앞에서 봤던 것 중에서도 있음
-- 주민번호 컬럼이 있는데 → 테이블에 직접 [현재나이] 컬럼이 있는 경우
-- 960608인데, 현재 나이에 10이라고 되어있으면 뭐가 맞는거임...
-- 둘 중에 하나 틀린 거....... 만약 27살로 제대로 된 나이가 들어간거라면
-- 테이블의 컬럼으로 들어가있다면, 내년에 UPDATE, 내후년에 또 UPDATE 해줘야됨..
-- 해마다 UPDATE 안 시켜주면....그 테이블 그냥 쓰레기 되어버림...
-- 그리고 UPDATE 하면서, 김정용 컬럼은 UPDATE 했는데, 다른 애는 안해줌..
-- 그럼 뭐가 UPDATE 된거고, 뭐가 안된건지 모름....
-- [현재나이] 컬럼 하나 때문에 실무적으로 미침...ㅎㅎㅎㅎ!!!

-- ex3)
-- 놀이기구 탑승객 ... ← 키가 140cm 이상만 탈 수 있는 놀이기구
-- 이럴 경우 탑승객의 키가 얼마인지만 나와있으면 됨
-- 쿼리문으로 140 넘은 사람 얻어낼 수 있음
-- 그런데, 테이블 안에다가 [탑승가능여부] 만들어서 y/n 표시하면...
-- 내년에 그 사람이 탈 수 있는지 아닌지가 또 바뀔텐데....

-- *** 컬럼으로 집어넣어야 하는지, 기존 데이터로 얻어낼 수 있는 데이터인지
--     명확하게 판단해서 테이블 설계해야 한다!!!! ***

-->> ** !!!! 실무자들도 실수 굉~장히 많이 하는 부분 !!!! **
--   이 규칙 어기지 않게 테이블 생성 잘하자
--   실무적으로 이런거 때문에 프로젝트 제대로 안 돌아가는 경우 매우 많음,,


-- ++) 추가 설명 조금 더
/*
<사원> 테이블                              <사원가족> 테이블
-----------------------------------------  ----------------------------------------
사원번호 사원명 주민번호 직급  입사일      번호  성명  주민번호  사원번호  가족관계
========                                   ====                  ++++++++
   PK                                       PK                     FK
-----------------------------------------  ----------------------------------------
 1001    이호석  9.....  부장  2020-..     101  아이유  9...       1001     아내
 1002    김상기  9.....  부장  2020-..     102  이병헌  0...       1001     아들       
 1003    이연주  9.....  과장  2020-..     103  강동원  9...       1003     남편
 1004    홍수민  0.....  대리  2022-..     104  강호동  0...       1003     아들
                :                                              :
-----------------------------------------  ----------------------------------------

사원 테이블의 [직급] 계속 반복됨
제 1 정규화 수행해야함
<직급> 테이블 따로 만들어서
-------------
  1   사원
  2   대리
  3   과장
  4   부장
------------  이렇게 해놓고 
<사원> 테이블에서는 직급 대신, 직급 코드로 해놔야 바람직함
회사마다 직급 이름이 다를 수 있음

Q. 이 테이블에서의 문제점? (총 3개의 문제가 있음)
→ 두 사원이 엮이게 됐을 경우
→ <사원> 테이블의 직급
→ <가족> 테이블의 가족관계

A. ① 사원가족 테이블에서 아이유가 이호석의 아내이면서
                                   김상기의 딸이기도 하면,
      또, 두 사원이 결혼해서 아이를 낳은 경우 → 두 사원과 엮이게 되면                             
      PK 가 같은 중복행이 생기게 된다.
      
--> 보기에 별 문제 없어 보여서 → 실무에서 문제 많이 생김!

    실제 쌤이 실무에서 본 문제,
   ② <사원가족> 테이블에서 [가족관계] 문제
      어떤 회사에서,  
      사원 가족들 중에 배우자가 있는 경우에, 뮤지컬 티켓 주는 행사 진행했음
      가족관계를 저런식으로 넣어놓으면
      가족관계 WEB 상에서 TEXT 박스로 입력한 거임
      
      가족관계를 클라이언트가 직접 TEXT로 입력하게 두는거랑,
                              SELECT BOX (선택박스)에서 선택하는거랑   다름!
                              ---------------------
                              1. 배우자
                              2. 조부, 조모
                              3. 부모
                              4. 자녀
                                :
       → 얘도 직급처럼 따로 <가족관계> 테이블 만들어서 
                            ------------------
                                1   배우자
                                2   부모
                                3   자녀
                                4   조부모
                            ------------------
          <사원가족> 테이블에 [가족관계코드] 로 바꿔주는게 바람직하다.
          
          직접 입력하게 두면,
          만약, 아내 입력하는 곳에
          아내 대신 부인, 와이프, 안사람, 마누라 ...... 다 가능해진다...
          → 그럼 배우자 찾을 수 없음.....
          아들 입력해야 하는데 아들, 아들래미, 자식, 첫째, 장남 ......
          
          
          →→ *** 입력 데이터를 예측할 수 있는 컬럼이라면...
                   반드시 '코드화'시켜라....!!! ***   
                   ex) 직급, 가족관계, 관련학과...
                                       --------
                연영과, 연극영화과, 연극영화학과, 연극영화, 연극영화학......
                우리는 같은 학과로 보이지만, 데이터 상으로는 같은 데이터 아니다.
                                                           
*/


-- 다시..이건 절대 바람직한 거 아님
--※ 생성된 테이블 구조 변경 → 컬럼 추가
--   (총점 → TOT, 평균 → AVG, 등급 → GRADE)
ALTER TABLE TBL_SUNGJUK
ADD ( TOT NUMBER(3), AVG NUMBER(4, 1), GRADE CHAR );
--==>> Table TBL_SUNGJUK이(가) 변경되었습니다.


--○ 변경된 테이블 구조 확인
DESC TBL_SUNGJUK;
--==>>
/*

이름     널?       유형           
------ -------- ------------ 
HAKBUN NOT NULL NUMBER       
NAME            VARCHAR2(40) 
KOR             NUMBER(3)    
ENG             NUMBER(3)    
MAT             NUMBER(3)    
TOT             NUMBER(3)    
AVG             NUMBER(4,1)  
GRADE           CHAR(1)      
*/


-- 20220310_01_scott(plsql).sql 로 돌아감

-- 362 line 작성하고 옴


--○ 프로시저 생성 후 실행
EXEC PRC_SUNGJUK_INSERT(1, '최선하', 90, 80, 70);
--==>> PL/SQL 프로시저가 성공적으로 완료되었습니다.


--○ 프로시저 호출 이후 테이블 조회
SELECT *
FROM TBL_SUNGJUK;
--==>> 1	최선하	90	80	70	240	80	B


--○ 프로시저 생성 후 실행
EXEC PRC_SUNGJUK_INSERT(2, '박현수', 87, 97, 67);
--==>> PL/SQL 프로시저가 성공적으로 완료되었습니다.


--○ 프로시저 호출 이후 테이블 조회
SELECT *
FROM TBL_SUNGJUK;
--==>> 
/*
1	최선하	90	80	70	240	  80	B
2	박현수	87	97	67	251	83.7	B
*/


-- 20220310_01_scott(plsql).sql 로 돌아감

-- 427 line 작성하고 옴


--○ 프로시저 생성 후 실행
EXEC PRC_SUNGJUK_UPDATE(2, 50, 50, 50);
--==>> PL/SQL 프로시저가 성공적으로 완료되었습니다.


--○ 프로시저 호출 이후 테이블 조회
SELECT *
FROM TBL_SUNGJUK;
--==>> 
/*
1	최선하	90	80	70	240	80	B
2	박현수	50	50	50	150	50	F
*/


-- 20220310_01_scott(plsql).sql 로 돌아감



-- 536 line 작성하고 옴

--○ TBL_STUDENTS 테이블 조회
SELECT *
FROM TBL_STUDENTS;
--==>>
/*
happy	이시우	010-1111-1111	제주도 서귀포시
rainbow	김정용	010-2222-2222	서울 강남구
*/


--○ TBL_IDPW 테이블 조회
SELECT *
FROM TBL_IDPW;
--==>>
/*
happy	java006$
rainbow	java006$
*/


--○ 프로시저 생성 후 실행 (잘못된 패스워드)
EXEC PRC_STUDENTS_UPDATE('happy', 'java006', '010-9999-9999', '강원도 횡성');
--==>> PL/SQL 프로시저가 성공적으로 완료되었습니다.
--==>> BUT, 데이터 수정되지 않음...
--          비밀번호가 다르기 때문에 !!!


--○ 프로시저 호출 이후 테이블 조회
SELECT *
FROM TBL_STUDENTS;
--==>> happy	이시우	010-1111-1111	제주도 서귀포시


--○ 프로시저 생성 후 실행 (잘못된 아이디)
EXEC PRC_STUDENTS_UPDATE('happt', 'java006$', '010-9999-9999', '강원도 횡성');
--==>> PL/SQL 프로시저가 성공적으로 완료되었습니다.
--==>> BUT, 데이터 수정되지 않음...
--          아이디가 다르기 때문에 !!!


--○ 프로시저 호출 이후 테이블 조회
SELECT *
FROM TBL_STUDENTS;
--==>> happy	이시우	010-1111-1111	제주도 서귀포시


--○ 프로시저 생성 후 실행 
EXEC PRC_STUDENTS_UPDATE('happy', 'java006$', '010-9999-9999', '강원도 횡성');
--==>> PL/SQL 프로시저가 성공적으로 완료되었습니다.


--○ 프로시저 호출 이후 테이블 조회
SELECT *
FROM TBL_STUDENTS;
--==>> 
/*
happy	이시우	010-9999-9999	강원도 횡성
rainbow	김정용	010-2222-2222	서울 강남구
*/


